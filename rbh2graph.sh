#!/bin/bash

#Please create a new directory which contains these 3 things:
#1: All of the files from rbh2graph repository on github except for the taxidlineage.dmp file and the 8 files ending with .rbh
#2: All of the .rbh files that will be used in your study that are generated by this software https://github.com/conchoecia/odp in the format as seen in the example .rbh files. Please refer to the methods in our manuscript to see how to generate those files using odp.
#3: The taxidlineage.dmp file from NCBI. One way to get this (which is the dictionary of the complete set of all species on NCBI mapping each TaxID to the complete set of lineage of TaxIDs) is by downloading the archive containing this file from NCBI and extracting the files from it (this worked in 2024 July, but the exact location or file name on NCBI may change in the future, the taxidlineage.dmp that comes with rbh2graph shows the format of this file as example): #wget https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.tar.gz; tar -xvzf new_taxdump.tar.gz

#rbh2graph can be run simply as below:
#bash ./rbh2graph.sh
#Which will create the files that will be loaded to NEO4J, and a single Cypher script that will be used for loading the nodes, properties and connections from all of the files that will be generated. You will need to load the nodes to your own NEO4J installation by moving the files generated by rbh2graph to your NEO4J import directory, and then by running the one line code at the end of this script by applying your username, database name, password, IP and port. If you have a local NEO4J installation on your computer, or if you would like to use NEO4J Sandbox online to test a small sample set, you can still use the CypherCode file that will be created which will contain pieces of Cypher code to load each file one by one. In that case please move the files to a location that can be reached by your NEO4J instance. Please refer to NEO4J website for explanations on how to install and set up a neo4j server and cypher-shell.
#Before running rbh2graph for your data, please delete the 8 example .rbh files and the taxidlineage.dmp file (which contains 10 lines of the original file from NCBI) which come together with rbh2graph for testing purposes.
#To test the code please keep those original example files mentioned above and run it as it is in a new directory.

#STEP 1#Prepare_Various_Files#
#The starting point of using this script is having a directory only with all the files from rbh2graph and all of the rbh files to be converted into a graph database (rbh=reciprocal best hit files for each species (versus BCnS in our case) with .rbh extension.
#The rbh files that were used in our study were named in the way that the TaxID of the species was written following the first dash in the file name followed by a second dash, therefore this is used to extract the TaxIDs of the species for each rbh file to generate a file with TaxIDs of every species.
#Because there are rbh files for the same species from more than one genome assembly (in our study's case), only the unique appearances of the TaxIDs are taken into a file, because in the graph database we decided to use only one (randomly selected) assembly for each species:
ls -1 *.rbh | cut -f2 -d'-' | sort -u -V > UniqueTaxIDs
#Using this file of unique TaxIDs, extract the list of full file names for each unique species:
for i in $(cat UniqueTaxIDs); do find | grep -w ${i} -m1 ;done > UniqueTaxIDFileNames
#Generate a new directory to move the rbh files that will not be used for species that have more than 1 rbh files from different genome assemblies:
mkdir ExcludedRBHs
#First move all rbh files there, and then move back the set of rbh files from unique species:
mv *rbh ExcludedRBHs; for i in $(cat UniqueTaxIDFileNames); do mv ExcludedRBHs/${i} .;done
#Generate the first couple of files that will be used for loading the OGs and ALGs as unique nodes to NEO4J:
cut -f1,2 *rbh | sed -e 's/\t/_/g' | sed '/rbh_gene_group/d' | sort -u -V > ALLuniqueGENEfamilyNAMESunderscored
cut -f4 -d '_' ALLuniqueGENEfamilyNAMESunderscored > ALLuniqueGENEfamilyNAMESunderscoredCHRS
paste ALLuniqueGENEfamilyNAMESunderscored ALLuniqueGENEfamilyNAMESunderscoredCHRS > ALLuniqueGENEfamilyNAMESunderscoredREADY
cut -f2 ALLuniqueGENEfamilyNAMESunderscoredREADY | sort -u | sed '1 i\ALG'  > ALGs
sed -e 's/\t/,/g' ALLuniqueGENEfamilyNAMESunderscoredREADY | sed '1 i\OG,ALG' > OGs
#One way to get the dictionary of the complete set of all species on NCBI mapping to complete lineage of TaxIDs is by downloading the archive containing this file from NCBI:
#wget https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.tar.gz
#tar -xvzf new_taxdump.tar.gz
#Then to use it for pattern matching in NEO4J later, we reshape its format so each TaxID of a lineage is separated and surrounded by dots:
awk -v OFS="\t" '$1=$1' taxidlineage.dmp | sed -e 's/|\t//g' | sed -e 's/\t|//g' | sed -e 's/\t/./g' | sed 's/^/./' | sed 's/$/./' > taxidlineage.dmp.DOTTED
#Extract the lineage TaxIDs of the species in our list:
awk 'BEGIN {FS="."}; NR==FNR{j[$1];next}($2 in j)' UniqueTaxIDs taxidlineage.dmp.DOTTED > UniqueTaxIDs.LINEAGED

#STEP 2#Generate_Species_Files#
#These files will be in the format NEO4J can use, and will define the nodes for each unique species from the rbh files. These nodes will contain these definitions, aka properties in this order: Species,Gene,Chromosome,CoordinateStart,TaxID,Assembly,Lineage
for i in *rbh
do
SP1=$(echo "${i}" | cut -f1 -d'_')
SP2=$(echo "${i}" | cut -f2 -d'_')
ID=$(echo "${i}" | cut -f2 -d'-')
SPNAME=$(echo "${i}" | cut -f2 -d'_' | cut -f1 -d'-')
ASSEMBLY=$(echo "${i}" | cut -f2 -d'_' | cut -f3 -d'-')
TAXLINEAGE=$(awk -v Id="${ID}" 'BEGIN {FS="."}; $2==Id' UniqueTaxIDs.LINEAGED)
awk -v Sp1="${SP1}" -v Sp2="${SP2}" -v Id="${ID}" 'NR==1 {for (j=1; j<=NF; j++) {f[$j] = j}} {print $(f[Sp1"_gene"]) "\t" $(f[Sp2"_gene"]) "\t" $(f[Sp1"_scaf"]) "\t" $(f[Sp2"_scaf"]) "\t" $(f[Sp2"_pos"]) "\t" $(f["whole_FET"])}' <(awk 'BEGIN { FS = OFS = "\t" } { for(k=1; k<=NF; k++) if($k ~ /^ *$/) $k="UnknowN"};1' ${i}) | awk -v Id="${ID}" -v SPname="${SPNAME}" -v Assembly="${ASSEMBLY}" -v TaxLineage="${TAXLINEAGE}" '{print SPname "\t" $2 "." Id "\t" $4 "\t" $5 "\t" Id "\t" Assembly "\t" TaxLineage }' | sed '1d' | sed -e 's/\t/,/g' | sed '1 i\Species,Gene,Chromosome,CoordinateStart,TaxID,Assembly,Lineage'  > ${ID}.species
done

#STEP 3#Generate_Orthogroup_Files#
#These files will also be in the format NEO4J can use, and will define the pairwise orthology connections between the gene nodes of each species and the OG nodes in separate files.
for i in *rbh
do
SP1=$(echo "${i}" | cut -f1 -d'_')
SP2=$(echo "${i}" | cut -f2 -d'_')
ID=$(echo "${i}" | cut -f2 -d'-')
SPNAME=$(echo "${i}" | cut -f2 -d'_' | cut -f1 -d'-')
ASSEMBLY=$(echo "${i}" | cut -f2 -d'_' | cut -f3 -d'-')
TAXLINEAGE=$(awk -v Id="${ID}" 'BEGIN {FS="."}; $2==Id' UniqueTaxIDs.LINEAGED)
awk -v Sp1="${SP1}" -v Sp2="${SP2}" -v Id="${ID}" 'NR==1 {for (j=1; j<=NF; j++) {f[$j] = j}} {print $(f[Sp1"_gene"]) "\t" $(f[Sp2"_gene"]) "\t" $(f[Sp1"_scaf"]) "\t" $(f[Sp2"_scaf"]) "\t" $(f[Sp2"_pos"]) "\t" $(f["whole_FET"])}' <(awk 'BEGIN { FS = OFS = "\t" } { for(k=1; k<=NF; k++) if($k ~ /^ *$/) $k="UnknowN"};1' ${i}) | awk -v Id="${ID}" '{print $2 "." Id "\t" $1 "_" $3 }' | sed '1d' | sed '1 i\Gene'"${ID}"',OG\'| sed -e 's/\t/,/g' > ${ID}.og
done

#STEP 4#Generate_ALG_Files#
#The last set of files that will be in the format NEO4J can use, these will define the pairwise orthology connections between the chromosome nodes of each species and ALG nodes. 
#Note that in our study a chromosome is accepted to be orthologous to an ALG if the Bonferroni-corrected Fisher`s exact test p-value (which appears in whole_FET field of the rbh files) was smaller than 0.01, to change that please change the value in this piece of the code below: | awk '$3<=0.01' |
for i in *rbh
do
SP1=$(echo "${i}" | cut -f1 -d'_')
SP2=$(echo "${i}" | cut -f2 -d'_')
ID=$(echo "${i}" | cut -f2 -d'-')
SPNAME=$(echo "${i}" | cut -f2 -d'_' | cut -f1 -d'-')
ASSEMBLY=$(echo "${i}" | cut -f2 -d'_' | cut -f3 -d'-')
TAXLINEAGE=$(awk -v Id="${ID}" 'BEGIN {FS="."}; $2==Id' UniqueTaxIDs.LINEAGED)
awk -v Sp1="${SP1}" -v Sp2="${SP2}" -v Id="${ID}" 'NR==1 {for (j=1; j<=NF; j++) {f[$j] = j}} {print $(f[Sp1"_gene"]) "\t" $(f[Sp2"_gene"]) "\t" $(f[Sp1"_scaf"]) "\t" $(f[Sp2"_scaf"]) "\t" $(f[Sp2"_pos"]) "\t" $(f["whole_FET"])}' <(awk 'BEGIN { FS = OFS = "\t" } { for(k=1; k<=NF; k++) if($k ~ /^ *$/) $k="UnknowN"};1' ${i}) | awk '{print $4 "\t" $3 "\t" $6 }' | sed '1d' | sort -u | awk '$3<=0.01' | cut -f1,2 | sed '1 i\Chromosome'"${ID}"',ALG\' | sed -e 's/\t/,/g' > ${ID}.alg
done

#STEP 5#Generate_Cypher_Code#
#This is the step to create a single file with the complete NEO4J Cypher code needed to load all of the .species .og and .alg files that were created in steps 2,3,4 for each species, and the ALGs and OGs files created in step 1.
#The 5 scripts that start with CYPHER include the Cypher codes, CYPHERuniqueALGlist CYPHERuniqueOGlist are taken as unchanged, and the rest of the code pieces below generates variants of Cypher codes using the other 3 CYPHER scripts for loading the .species .og and .alg files for each species.
cat CYPHERuniqueALGlist CYPHERuniqueOGlist >> CypherCode

for i in $(cat UniqueTaxIDs)
do
sed -e 's/SP/'"${i}"'/g' CYPHERoG >> CypherCode
done

for i in $(cat UniqueTaxIDs)
do
sed -e 's/SP/'"${i}"'/g' CYPHERalG >> CypherCode
done

for i in $(cat UniqueTaxIDs)
do
sed -e 's/SP/'"${i}"'/g' CYPHERspecieS >> CypherCode
done

#Removing intermediate files that are not needed anymore:
rm ALLuniqueGENEfamilyNAMESunderscored ALLuniqueGENEfamilyNAMESunderscoredCHRS ALLuniqueGENEfamilyNAMESunderscoredREADY taxidlineage.dmp.DOTTED UniqueTaxIDFileNames UniqueTaxIDs UniqueTaxIDs.LINEAGED

#STEP 6#Load_Nodes_To_NEO4J#
#Transfer all .species .og .alg files together with ALGs and OGs files to /var/lib/neo4j/import on your server (or to another directory if your import directory is defined differently in your neo4j.conf file) and run the script named CypherCode that was generated in step 5, using cypher-shell from neo4j server installation as below (change the variables defined for -u -p -d and -a based on your server and Neo4J installation):
#cypher-shell -u user -p password -d database -a neo4j://serverIP:port -f CypherCode
